module mod_test_splines
  use mod_suite_utils
  use funit
  use mod_basis_functions
  implicit none

  real(dp)  :: actual(4), expected(4)
  real(dp), parameter :: left = 1.0d0
  real(dp), parameter :: right = 2.0d0

contains

  @before
  subroutine init_test()
    ! do nothing
  end subroutine init_test


  @after
  subroutine teardown_test()
    actual = 0.0d0
    expected = 0.0d0
  end subroutine teardown_test


  @test
  subroutine test_Q_spline()
    call set_name("basis functions (hquad)")
    actual = hquad(1.2d0, left, right)
    expected = [0.64d0, 0.0d0, -0.12d0, 0.48d0]
    @assertEqual(expected, actual, tolerance=TOL)
  end subroutine test_Q_spline


  @test
  subroutine test_dQ_spline()
    call set_name("basis functions (dhquad)")
    actual = dhquad(1.5d0, left, right)
    expected = [0.0d0, 0.0d0, 1.0d0, -1.0d0]
    @assertEqual(expected, actual, tolerance=TOL)
  end subroutine test_dQ_spline


  @test
  subroutine test_C_spline()
    call set_name("basis functions (cubic)")
    actual = hcubic(1.7d0, left, right)
    expected = [0.784d0, 0.216d0, -0.147d0, 0.063d0]
    @assertEqual(expected, actual, tolerance=TOL)
  end subroutine test_C_spline


  @test
  subroutine test_dC_spline()
    call set_name("basis functions (dcubic)")
    actual = dhcubic(1.9d0, left, right)
    expected = [0.54d0, -0.54d0, 0.63d0, -0.17d0]
    @assertEqual(expected, actual, tolerance=TOL)
  end subroutine test_dC_spline


  @test
  subroutine test_ddC_spline()
    call set_name("basis functions (ddcubic)")
    actual = ddhcubic(1.8d0, left, right)
    expected = [-3.6d0, 3.6d0, 2.8d0, 0.8d0]
    @assertEqual(expected, actual, tolerance=TOL)
  end subroutine test_ddC_spline

end module mod_test_splines
