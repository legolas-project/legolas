module comparison_tests
  use mod_global_variables, only: dp, matrix_gridpts
  use funit 
  implicit none
  
  integer, parameter    :: test_gridpts = 101
  integer, parameter    :: omega_base_unit = 10
  real(dp), parameter   :: TOL = 1.0d-9
  
  character(len=21), parameter  :: results_folder = "correct_test_results/"
  
contains 
  
  
  subroutine setup_test_config()
    use mod_global_variables, only: set_gridpts, set_gamma
    use mod_equilibrium, only: initialise_equilibrium, set_equilibrium
    use mod_equilibrium_derivatives, only: initialise_equilibrium_derivatives
    use mod_input, only: read_parfile
    
    !! Initialise basic configuration
    call read_parfile("")   !! this sets all default values
    call set_gridpts(test_gridpts)
    call set_gamma(5.0d0/3.0d0)
    call initialise_equilibrium()
    call initialise_equilibrium_derivatives()
  end subroutine setup_test_config
  
  
  subroutine teardown_test_config()
    use mod_grid, only: grid_clean
    use mod_equilibrium, only: equilibrium_clean
    use mod_equilibrium_derivatives, only: equilibrium_derivatives_clean
    use mod_global_variables, only: radiative_cooling
    use mod_radiative_cooling, only: radiative_cooling_clean
    
    call grid_clean()
    call equilibrium_clean()
    call equilibrium_derivatives_clean()
    if (radiative_cooling) then 
      call radiative_cooling_clean()
    end if
  end subroutine teardown_test_config
  
  
  subroutine read_stored_eigenvals(filename, omega_base)
    character(len=*), intent(in)  :: filename 
    complex(dp), intent(out)      :: omega_base(matrix_gridpts)
    
    open(unit=omega_base_unit, file=filename, access='stream', status='old', action='read')
    read(unit=omega_base_unit) omega_base
    close(unit=omega_base_unit)
  end subroutine read_stored_eigenvals
  
  
  subroutine sort_eigenvalues(eigenvals)
    complex(dp), intent(inout)  :: eigenvals(matrix_gridpts)
    complex(dp)                 :: temp
    integer                     :: i, minidx
    
    do i = 1, size(eigenvals)-1
      minidx = minloc(real(eigenvals(i:)), 1) + i - 1
      if (real(eigenvals(i)) > real(eigenvals(minidx))) then
        temp = eigenvals(i)
        eigenvals(i) = eigenvals(minidx)
        eigenvals(minidx) = temp
      end if
    end do
    
  end subroutine sort_eigenvalues
  
  
  subroutine get_comparison_test(filename, omega, omega_base)
    use mod_global_variables, only: equilibrium_type
    use mod_equilibrium, only: set_equilibrium
    use mod_matrix_creation, only: create_matrices
    use mod_solvers, only: solve_QR
  
    character(len=*), intent(in)  :: filename 
    complex(dp), intent(out)      :: omega(matrix_gridpts), omega_base(matrix_gridpts)
  
    real(dp)      :: matrix_B(matrix_gridpts, matrix_gridpts)
    complex(dp)   :: matrix_A(matrix_gridpts, matrix_gridpts)
    complex(dp)   :: ev_l(matrix_gridpts, matrix_gridpts)
    complex(dp)   :: ev_r(matrix_gridpts, matrix_gridpts)
    
    write(*, *) "  - setting up test..."
  
    !! read correct test results, store in 'omega_base'
    write(*, *) "  - reading and storing correct base solutions..."
    call read_stored_eigenvals(filename, omega_base)
    call sort_eigenvalues(omega_base)

    call set_equilibrium()
    write(*, *) "  - equilibrium set: ", trim(equilibrium_type)
  
    !! solve test problem 
    call create_matrices(matrix_B, matrix_A)
    write(*, *) "  - solving eigenvalue problem..."
    call solve_QR(matrix_A, matrix_B, omega, ev_l, ev_r)
  
    !! sort result and wrap up 
    write(*, *) "  - comparing results to base..."
    call sort_eigenvalues(omega)
  
  end subroutine get_comparison_test
  
  
  @test 
  subroutine test_adiabatic_homogeneous()
    use mod_global_variables, only: str_len, equilibrium_type
    
    character(len=str_len)    :: filename
    complex(dp), allocatable  :: omega(:), omega_base(:)
    
    !!@note: it is important to make omega and omega_base allocatable.
    !!       At this point matrix_gridpts is not yet properly initialised, this 
    !!       is done in setup_test_config()
    !!       Not doing this yields a segfault, as matrix_gridpts will have different 
    !!       values between here and the main source code before it is set.
    
    write(*, *) "Testing adiabatic homogeneous equilibrium"
    
    call setup_test_config()
    allocate(omega(matrix_gridpts))
    allocate(omega_base(matrix_gridpts))

    filename = results_folder // "1-adiabatic-homo.dat"
    equilibrium_type = "Adiabatic homogeneous"

    call get_comparison_test(trim(filename), omega, omega_base)
    !! Deallocate configuration, only omega and omega_base are needed to compare.
    !! Done to prevent skipping deallocation if test fails.
    call teardown_test_config()
    
    @assertEqual(omega, omega_base, tolerance=TOL)
    deallocate(omega)
    deallocate(omega_base)
    
  end subroutine test_adiabatic_homogeneous
  
  
  @test 
  subroutine test_resistive_homogeneous()
    use mod_global_variables, only: str_len, equilibrium_type
    
    character(len=str_len)    :: filename 
    complex(dp), allocatable  :: omega(:), omega_base(:)
    
    write(*, *) "Testing resistive homogeneous equilibrium"
    
    call setup_test_config()
    allocate(omega(matrix_gridpts))
    allocate(omega_base(matrix_gridpts))
    
    filename = results_folder // "2-resistive-homo.dat"
    equilibrium_type = "Resistive homogeneous"
    
    call get_comparison_test(trim(filename), omega, omega_base)
    call teardown_test_config()
    
    @assertEqual(omega, omega_base, tolerance=TOL)
    deallocate(omega)
    deallocate(omega_base)
    
  end subroutine test_resistive_homogeneous
  
  
  @test 
  subroutine test_resistive_tearing()
    use mod_global_variables, only: str_len, equilibrium_type
    
    character(len=str_len)    :: filename 
    complex(dp), allocatable  :: omega(:), omega_base(:)
    
    write(*, *) "Testing resistive tearing equilibrium"
    
    call setup_test_config()
    allocate(omega(matrix_gridpts))
    allocate(omega_base(matrix_gridpts))
    
    filename = results_folder // "4-resistive-tearing.dat"
    equilibrium_type = "Resistive tearing modes"
    
    call get_comparison_test(trim(filename), omega, omega_base)
    call teardown_test_config()
    
    @assertEqual(omega, omega_base, tolerance=TOL)
    deallocate(omega)
    deallocate(omega_base)
    
  end subroutine test_resistive_tearing
  
  
  @test 
  subroutine test_resistive_tearing_flow()
    use mod_global_variables, only: str_len, equilibrium_type
    
    character(len=str_len)    :: filename 
    complex(dp), allocatable  :: omega(:), omega_base(:)
    
    write(*, *) "Testing resistive tearing (flow) equilibrium"
    
    call setup_test_config()
    allocate(omega(matrix_gridpts))
    allocate(omega_base(matrix_gridpts))
    
    filename = results_folder // "5-resistive-tearing-flow.dat"
    equilibrium_type = "Resistive tearing modes with flow"
    
    call get_comparison_test(trim(filename), omega, omega_base)
    call teardown_test_config()
    
    @assertEqual(omega, omega_base, tolerance=TOL)
    deallocate(omega)
    deallocate(omega_base)
    
  end subroutine test_resistive_tearing_flow
    
end module comparison_tests
  
  
    
    
